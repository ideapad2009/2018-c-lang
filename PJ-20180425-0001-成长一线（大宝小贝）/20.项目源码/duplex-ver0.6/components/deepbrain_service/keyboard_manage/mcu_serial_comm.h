#ifndef __MCU_SERIAL_COMM_H__
#define __MCU_SERIAL_COMM_H__
#include <stdio.h>
#include "keyboard_manage.h"

#define SERIAL_TXD_NUM 5
#define SERIAL_RXD_NUM 5

/*
typedef enum  
{
	DEVICE_NOTIFY_KEY_START = 0,
	DEVICE_NOTIFY_KEY_CHAT_TAP,
	DEVICE_NOTIFY_KEY_CHAT_PUSH,
	DEVICE_NOTIFY_KEY_CHAT_RELEASE,
	DEVICE_NOTIFY_KEY_CHAT_LONGPRESSED,

	DEVICE_NOTIFY_KEY_LED_TAP,
	DEVICE_NOTIFY_KEY_LED_PUSH,
	DEVICE_NOTIFY_KEY_LED_RELEASE,
	DEVICE_NOTIFY_KEY_LED_LONGPRESSED,

	DEVICE_NOTIFY_KEY_VOL_UP_TAP,
	DEVICE_NOTIFY_KEY_VOL_UP_PUSH,
	DEVICE_NOTIFY_KEY_VOL_UP_RELEASE,
	DEVICE_NOTIFY_KEY_VOL_UP_LONGPRESSED,

	DEVICE_NOTIFY_KEY_VOL_DOWN_TAP,
	DEVICE_NOTIFY_KEY_VOL_DOWN_PUSH,
	DEVICE_NOTIFY_KEY_VOL_DOWN_RELEASE,
	DEVICE_NOTIFY_KEY_VOL_DOWN_LONGPRESSED,

	DEVICE_NOTIFY_KEY_MENU_TAP,
	DEVICE_NOTIFY_KEY_MENU_PUSH,
	DEVICE_NOTIFY_KEY_MENU_RELEASE,
	DEVICE_NOTIFY_KEY_MENU_LONGPRESSED,

	DEVICE_NOTIFY_KEY_PREV_TAP,
	DEVICE_NOTIFY_KEY_PREV_PUSH,
	DEVICE_NOTIFY_KEY_PREV_RELEASE,
	DEVICE_NOTIFY_KEY_PREV_LONGPRESSED,

	DEVICE_NOTIFY_KEY_PLAY_TAP,
	DEVICE_NOTIFY_KEY_PLAY_PUSH,
	DEVICE_NOTIFY_KEY_PLAY_RELEASE,
	DEVICE_NOTIFY_KEY_PLAY_LONGPRESSED,

	DEVICE_NOTIFY_KEY_NEXT_TAP,
	DEVICE_NOTIFY_KEY_NEXT_PUSH,
	DEVICE_NOTIFY_KEY_NEXT_RELEASE,
	DEVICE_NOTIFY_KEY_NEXT_LONGPRESSED,

	DEVICE_NOTIFY_KEY_STORY_TAP,
	DEVICE_NOTIFY_KEY_STORY_PUSH,
	DEVICE_NOTIFY_KEY_STORY_RELEASE,
	DEVICE_NOTIFY_KEY_STORY_LONGPRESSED,

	DEVICE_NOTIFY_KEY_FW_UPDATE_TAP,
	DEVICE_NOTIFY_KEY_FW_UPDATE_PUSH,
	DEVICE_NOTIFY_KEY_FW_UPDATE_RELEASE,
	DEVICE_NOTIFY_KEY_FW_UPDATE_LONGPRESSED,
	DEVICE_NOTIFY_KEY_END,
}DEVICE_NOTIFY_KEY_T;
*/

//LED单片机命令
typedef enum
{	
	LED_CMD_NUM_START = 0,
	
	LED_CMD_NUM_EYE_U_OPEN,    //眼上 开	
	LED_CMD_NUM_EYE_U_CLOSE,   //眼上 关
	LED_CMD_NUM_EYE_U_BLINK,   //眼上 闪
	
	LED_CMD_NUM_EYE_D_OPEN,    //眼下 开
	LED_CMD_NUM_EYE_D_CLOSE,   //眼下 关
	LED_CMD_NUM_EYE_D_BLINK,   //眼上 闪

	LED_CMD_NUM_HEAD_OPEN,    //头 开
	LED_CMD_NUM_HEAD_CLOSE,    //头 关

	LED_CMD_NUM_EAR_OPEN,     //耳朵 开
	LED_CMD_NUM_EAR_CLOSE,     //耳朵 关
	
	LED_CMD_NUM_KEY_OPEN,      //键盘 开
	LED_CMD_NUM_KEY_CLOSE,     //键盘 关
	LED_CMD_NUM_KEY_BLINK,     //键盘 闪
	
	LED_CMD_NUM_OK,
	LED_CMD_NUM_FAIL,
}LED_CMD_NUM_T;

typedef enum
{
	PLAY_NULL,
	PLAY_TTS,
	PLAY_AUDIO,
}PLAYER_STATUS;

typedef struct {
	char led_cmd[SERIAL_TXD_NUM];
}LED_EXP_CMD_T;

PLAYER_STATUS player_status;

typedef void (* mcu_key_cb)(DEVICE_KEY_EVENT_T _key_event);
typedef void (* mcu_battery_cb)(float _battery_vol);

void mcu_serial_comm_create(mcu_key_cb _key_cb, mcu_battery_cb _battery_cb);
void keyboard_lock_init(void);
int keyboard_lock(void);
void keyboard_unlock(void);
int keyboard_lock_status(void);
void mcu_serial_process(void);
int led_mcu_cmd(LED_CMD_NUM_T cmd_num);



#endif


