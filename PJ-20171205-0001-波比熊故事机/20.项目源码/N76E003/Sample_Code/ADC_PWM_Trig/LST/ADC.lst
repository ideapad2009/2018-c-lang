C51 COMPILER V9.52.0.0   ADC                                                               02/09/2017 16:28:04 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Output\ADC.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\ADC.C BROWSE INCDIR(..\..\Include) DEFINE(FOSC_160000) DEBUG OBJECTEXT
                    -END PRINT(.\LST\ADC.lst) TABS(2) OBJECT(.\Output\ADC.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //  Date   : Jan/21/2017
  11          //********************************************************************************************************
             -***
  12          
  13          //********************************************************************************************************
             -***
  14          //  File Function: N76E003 ADC and PWM inter-action trig demo code
  15          //********************************************************************************************************
             -***
  16          #include "N76E003.h"
  17          #include "SFR_Macro.h"
  18          #include "Function_define.h"
  19          #include "Common.h"
  20          #include "Delay.h"
  21          
  22          
  23          //*****************  The Following is in define in Fucntion_define.h  ***************************
  24          //****** Always include Function_define.h call the define you want, detail see main(void) *******
  25          //***********************************************************************************************
  26          #if 0
              //#define Enable_ADC_AIN0     ADCCON0&=0xF0;P17_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT0;ADCCON1|=SET_BIT0 
             -                //P17
              //#define Enable_ADC_AIN1     ADCCON0&=0xF0;ADCCON0|=0x01;P30_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT1;ADCC
             -ON1|=SET_BIT0    //P30
              //#define Enable_ADC_AIN2     ADCCON0&=0xF0;ADCCON0|=0x02;P07_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT2;ADCC
             -ON1|=SET_BIT0    //P07
              //#define Enable_ADC_AIN3     ADCCON0&=0xF0;ADCCON0|=0x03;P06_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT3;ADCC
             -ON1|=SET_BIT0    //P06
              //#define Enable_ADC_AIN4     ADCCON0&=0xF0;ADCCON0|=0x04;P05_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT4;ADCC
             -ON1|=SET_BIT0    //P05
              //#define Enable_ADC_AIN5     ADCCON0&=0xF0;ADCCON0|=0x05;P04_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT5;ADCC
             -ON1|=SET_BIT0    //P04
              //#define Enable_ADC_AIN6     ADCCON0&=0xF0;ADCCON0|=0x06;P03_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT6;ADCC
             -ON1|=SET_BIT0    //P03
              //#define Enable_ADC_AIN7     ADCCON0&=0xF0;ADCCON0|=0x07;P11_Input_Mode;AINDIDS=0x00;AINDIDS|=SET_BIT7;ADCC
             -ON1|=SET_BIT0    //P11
              //#define Enable_ADC_BandGap  ADCCON0|=0x0F;ADCCON1|=SET_BIT0                                                               //Band-gap 1.2
             -2V
              
C51 COMPILER V9.52.0.0   ADC                                                               02/09/2017 16:28:04 PAGE 2   

              //#define PWM0_FALLINGEDGE_TRIG_ADC   ADCCON0&=~SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1&=~SE
             -T_BIT2;ADCCON1|=SET_BIT1
              //#define PWM2_FALLINGEDGE_TRIG_ADC   ADCCON0&=~SET_BIT5;ADCCON0|=SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1&=~SET
             -_BIT2;ADCCON1|=SET_BIT1
              //#define PWM4_FALLINGEDGE_TRIG_ADC   ADCCON0|=SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1&=~SET
             -_BIT2;ADCCON1|=SET_BIT1
              //#define PWM0_RISINGEDGE_TRIG_ADC    ADCCON0&=~SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1|=SET_
             -BIT2;ADCCON1|=SET_BIT1
              //#define PWM2_RISINGEDGE_TRIG_ADC    ADCCON0&=~SET_BIT5;ADCCON0|=SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1|=SET_B
             -IT2;ADCCON1|=SET_BIT1
              //#define PWM4_RISINGEDGE_TRIG_ADC    ADCCON0|=SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1&=~SET_BIT3;ADCCON1|=SET_B
             -IT2;ADCCON1|=SET_BIT1
              //#define PWM0_CENTRAL_TRIG_ADC       ADCCON0&=~SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1&=~SET_B
             -IT2;ADCCON1|=SET_BIT1
              //#define PWM2_CENTRAL_TRIG_ADC       ADCCON0&=~SET_BIT5;ADCCON0|=SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1&=~SET_BI
             -T2;ADCCON1|=SET_BIT1
              //#define PWM4_CENTRAL_TRIG_ADC       ADCCON0|=SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1&=~SET_BI
             -T2;ADCCON1|=SET_BIT1
              //#define PWM0_END_TRIG_ADC           ADCCON0&=~SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1|=SET_BIT2
             -;ADCCON1|=SET_BIT1
              //#define PWM2_END_TRIG_ADC           ADCCON0&=~SET_BIT5;ADCCON0|=SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1|=SET_BIT2;
             -ADCCON1|=SET_BIT1
              //#define PWM4_END_TRIG_ADC           ADCCON0|=SET_BIT5;ADCCON0&=~SET_BIT4;ADCCON1|=SET_BIT3;ADCCON1|=SET_BIT2;
             -ADCCON1|=SET_BIT1
              
              //#define P04_FALLINGEDGE_TRIG_ADC    ADCCON0|=0x30;ADCCON1&=0xF3;ADCCON1|=SET_BIT1;ADCCON1&=~SET_BIT6
              //#define P13_FALLINGEDGE_TRIG_ADC    ADCCON0|=0x30;ADCCON1&=0xF3;ADCCON1|=SET_BIT1;ADCCON1|=SET_BIT6
              //#define P04_RISINGEDGE_TRIG_ADC     ADCCON0|=0x30;ADCCON1&=~SET_BIT3;ADCCON1|=SET_BIT2;ADCCON1|=SET_BIT1;A
             -DCCON1&=~SET_BIT6
              //#define P13_RISINGEDGE_TRIG_ADC     ADCCON0|=0x30;ADCCON1&=~SET_BIT3;ADCCON1|=SET_BIT2;ADCCON1|=SET_BIT1;A
             -DCCON1|=SET_BIT6
              #endif
  55          
  56          /******************************************************************************
  57           * FUNCTION_PURPOSE: ADC interrupt Service Routine
  58           ******************************************************************************/
  59          void ADC_ISR (void) interrupt 11
  60          {
  61   1          clr_ADCF;                               // Clear ADC interrupt flag
  62   1          printf ("\n Value = 0x%bx",ADCRH);    // printf display will cause delay in ADC interrupt
  63   1          P30 ^= 1;                               // Check the P3.0 toggle at falling edge of PWM
  64   1      }
  65          
  66          /******************************************************************************
  67          The main C function.  Program execution starts
  68          here after stack initialization.
  69          ******************************************************************************/
  70          void main (void) 
  71          {
  72   1          Set_All_GPIO_Quasi_Mode;
  73   1          InitialUART0_Timer1(115200);
  74   1        
  75   1      /*-------------------------------------------------
  76   1        ADC trig initial setting
  77   1        Please modify #if value to open diffent type
  78   1      --------------------------------------------------*/
  79   1      #if 1
  80   1      // By PWM falling edge
  81   1          PWM0_P12_OUTPUT_ENABLE;       
  82   1          Enable_ADC_AIN0;                            // Enable AIN0 P1.7 as ADC input
  83   1          PWM0_FALLINGEDGE_TRIG_ADC;  
  84   1      #endif    
C51 COMPILER V9.52.0.0   ADC                                                               02/09/2017 16:28:04 PAGE 3   

  85   1      #if 0
              // By PWM rising edge
                  PWM0_P12_OUTPUT_ENABLE;       
                  Enable_ADC_AIN0;                            // Enable AIN0 P1.7 as ADC input
                  PWM0_RISINGEDGE_TRIG_ADC;
              #endif    
  91   1      #if 0
              // By PWM central point
                  PWM0_P12_OUTPUT_ENABLE;       
                  Enable_ADC_AIN0;                            // Enable AIN0 P1.7 as ADC input
                  PWM_CENTER_TYPE;
                  PWM0_CENTRAL_TRIG_ADC;  
              #endif  
  98   1      #if 0
              // By PWM end point
                  PWM0_P12_OUTPUT_ENABLE;       
                  Enable_ADC_AIN0;                            // Enable AIN0 P1.7 as ADC input
                  PWM_CENTER_TYPE;
                  PWM0_END_TRIG_ADC;
              #endif  
 105   1        
 106   1      // Setting PWM value
 107   1          PWMPH = 0x07;                               //Setting PWM value          
 108   1          PWMPL = 0xFF;
 109   1          PWM0H = 0x02;
 110   1          PWM0L = 0xFF;
 111   1          set_LOAD;                                   // PWM run
 112   1          set_PWMRUN;
 113   1      // Setting ADC
 114   1          set_EADC;                                   // Enable ADC interrupt (if use interrupt)
 115   1          EA = 1; 
 116   1          while(1);
 117   1      
 118   1      }
 119          
 120          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    155    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
